@startuml
interface FieldSchemaProperty {
    +type: String | Type<Model>
    +validation?: ValidatorFn | ValidatorFn[] | AbstractControlOptions
    +items?: { type: String | Type<Model>; }
}
interface FieldSchema {
    [fieldName: string]: FieldSchemaProperty
}
interface ModelSchema {
    +addProxy?: string
    +infoProxy?: string
    +updateProxy?: string
    +deleteProxy?: string
    +rootProperty?: string
    +idProperty?: string
    +fields: FieldSchema
}
interface DefaultActionOptions {
    +showLoadmask?: boolean
    +showResultNotification?: boolean
}
abstract class Model {
    +schema?: ModelSchema
    +modelForm: FormGroup
    -__schema: ModelSchema
    +add(options?: DefaultActionOptions): Observable<ApiResponse>
    +update(options?: DefaultActionOptions): Observable<ApiResponse>
    +delete(options?: DefaultActionOptions): Observable<ApiResponse>
    +serialize(): any
    -serializeField(data: any, field: FieldSchemaProperty): any
    -convertField(data: any, field: FieldSchemaProperty): any
}
interface StoreSchema<T extends Model> {
    +model: Type<T>
    +listProxy: string
    +idProperty?: string
    +rootProperty: string
    +options?: { [key: string]: any; }
}
abstract class Store<T extends Model> {
    +{abstract} schema: StoreSchema<T>
    +loading: BehaviorSubject<boolean>
    +onLoad: Subject<ApiResponse>
    +dataSource: MatTableDataSource<T>
    +items: T[]
    -lastLoadParams: object
    +reload(additionalParams?: any): this
    +bulkDelete(ids: number[], options?: DefaultActionOptions): Observable<ApiResponse[]>
}
enum LockModes {
    Locked
    Unlocked
    Guard
}
enum LockIcons {
    Locked
    Unlocked
    Guard
}
class DeviceModel extends Model {
    +i_device: number
    +name: string
    +description: string
    +ip: string
    +status: boolean
    +mode: LockModes
    +schema: ModelSchema
    +icon: LockIcons
}
class CardModel extends Model {
    +i_card: number
    +name: string
    +uuid: string
    +i_role?: number
    +schema: ModelSchema
}
class RoleModel extends Model {
    +i_role: number
    +name: string
    +allowed_all: boolean
    +allowed_devices?: DeviceModel[]
    +cards: CardModel[]
    +schema: ModelSchema
    +getDeviceNames(): string
    +getCardNames(): string
}
class LogModel extends Model {
    +i_log: number
    +i_device: number
    +device_name: string
    +i_role: number
    +role_name: string
    +i_card: number
    +card_name: string
    +time: Date
    +access: number
    +device_ip: string
    +uuid: string
    +error: string
    +schema: ModelSchema
}

class DeviceStore extends Store {
    +schema: StoreSchema<DeviceModel>
}
class RoleStore extends Store {
    +schema: StoreSchema<RoleModel>
}
class LogStore extends Store {
    +schema: StoreSchema<LogModel>
}
class CardStore extends Store {
    +schema: StoreSchema<CardModel>
}

class ApiResponse {
    status: Statuses
    data?: any
    message?: string
    isSuccess(): boolean
    constructor(data: object)
}

FieldSchemaProperty *-- Model
ModelSchema *-- FieldSchema
Model *-- ModelSchema
Model *-- DefaultActionOptions
Model *-- ApiResponse
Model *-- FieldSchemaProperty
Store *-- StoreSchema
Store *-- ApiResponse
Store *-- DefaultActionOptions
DeviceModel *-- LockModes
DeviceModel *-- ModelSchema
DeviceModel *-- LockIcons
CardModel *-- ModelSchema
RoleModel *-- DeviceModel
RoleModel *-- CardModel
RoleModel *-- ModelSchema
LogModel *-- ModelSchema
DeviceStore *-- StoreSchema
DeviceStore *-- DeviceModel
RoleStore *-- StoreSchema
RoleStore *-- RoleModel
LogStore *-- StoreSchema
LogStore *-- LogModel
CardStore *-- StoreSchema
CardStore *-- CardModel

@enduml
