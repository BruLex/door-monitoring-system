@startuml
interface RootComponentInterface {
    +showLoadmask(): void
    +hideLoadmask(): void
}
enum Statuses {
    Success
    Error
}
class ApiResponse {
    +status: Statuses
    +data?: any
    +message?: string
    +isSuccess: boolean
}
interface ConfirmDialogConfig {
    +message: string
    +onSuccess: () => void
    +onFail?: () => void
}
interface DialogData {
    +message: string
}
class ConfirmDialogComponent {
    +data: DialogData
}
interface AppConfig {
    +title: string
    +showNavigation: boolean
    +username: string
}
class AppService {
    -title: string
    -username: string
    -showNavigation: boolean
    -http: HttpClient
    -matDialog: MatDialog
    -snackBar: MatSnackBar
    +setAppConfig(config: Partial<Pick<AppConfig, "title" | "showNavigation">>): void
    +getConfig(): AppConfig
    +apiRequest(options: { url: string; body?: object; }): Observable<ApiResponse>
    +fetchUserData(): Observable<ApiResponse>
    +setupRootComponent(rootComponent: RootComponentInterface): void
    +showLoadmask(): void
    +hideLoadmask(): void
    +openSnackBar(message: string): void
    +openConfirmDialog(config: ConfirmDialogConfig): void
    +{static} instance(): AppService
    -{static} rootComponent: RootComponentInterface
    -{static} _instance: AppService
}
class AppGuard implements CanActivate {
    -router: Router
    -appService: AppService
    +canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>
}
interface FieldSchemaProperty {
    +type: String | Type<Model>
    +validation?: ValidatorFn | ValidatorFn[] | AbstractControlOptions
    +items?: { type: String | Type<Model>; }
}
interface FieldSchema
interface ModelSchema {
    +addProxy?: string
    +infoProxy?: string
    +updateProxy?: string
    +deleteProxy?: string
    +rootProperty?: string
    +idProperty?: string
    +fields: FieldSchema
}
interface DefaultActionOptions {
    +showLoadmask?: boolean
    +showResultNotification?: boolean
}
abstract class Model {
    +schema?: ModelSchema
    +modelForm: FormGroup
    -__schema: ModelSchema
    +add(options?: DefaultActionOptions): Observable<ApiResponse>
    +update(options?: DefaultActionOptions): Observable<ApiResponse>
    +delete(options?: DefaultActionOptions): Observable<ApiResponse>
    +serialize(): any
    -serializeField(data: any, field: FieldSchemaProperty): any
    -convertField(data: any, field: FieldSchemaProperty): any
}
interface StoreSchema<T extends Model> {
    +model: Type<T>
    +listProxy: string
    +idProperty?: string
    +rootProperty: string
    +options?: { [key: string]: any; }
}
interface DefaultActionOptions {
    +showLoadmask?: boolean
    +showResultNotification?: boolean
}
abstract class Store<T extends Model> {
    +{abstract} schema: StoreSchema<T>
    +loading: BehaviorSubject<boolean>
    +onLoad: Subject<ApiResponse>
    +dataSource: MatTableDataSource<T>
    +items: T[]
    -lastLoadParams: object
    +reload(additionalParams?: any): this
    +bulkDelete(ids: number[], options?: DefaultActionOptions): Observable<ApiResponse[]>
}
abstract class AbstractEnityManageComponent<S extends Model, T extends Store<S>> implements OnDestroy, OnInit, AfterViewInit {
    +{abstract} sort: MatSort
    +store: T
    +manageEntityDialogRef: TemplateRef<ElementRef<any>>
    +currentModel: S
    +dialogEditMode: boolean
    +selection: SelectionModel<S>
    +subs: Subscription[]
    -mainKey: string
    #matDialog?: MatDialog
    #cdRef?: ChangeDetectorRef
    +ngOnInit(): void
    +ngAfterViewInit(): void
    +ngOnDestroy(): void
    +isAllSelected(): boolean
    +masterToggle(): void
    +checkboxLabel(row?: S): string
    +openDialog(mode: "edit" | "add", model?: S): void
    +deleteModels(): void
    #initSort(): void
    #compare(a: string | number, b: string | number, isAsc: boolean): number
}
interface ValidationConfig {
    +default?: any
    +type: "ip" | "str"
    +required?: boolean
    +minLength?: number
    +maxLength?: number
    +notEqualTo?: string[]
}
enum LockModes {
    Locked
    Unlocked
    Guard
}
enum LockIcons {
    Locked
    Unlocked
    Guard
}
class DeviceModel extends Model {
    +i_device: number
    +name: string
    +description: string
    +ip: string
    +status: boolean
    +mode: LockModes
    +schema: ModelSchema
    +icon: LockIcons
}
class CardModel extends Model {
    +i_card: number
    +name: string
    +uuid: string
    +i_role?: number
    +schema: ModelSchema
}
class RoleModel extends Model {
    +i_role: number
    +name: string
    +allowed_all: boolean
    +allowed_devices?: DeviceModel[]
    +cards: CardModel[]
    +schema: ModelSchema
    +getDeviceNames(): string
    +getCardNames(): string
}
class LogModel extends Model {
    +i_log: number
    +i_device: number
    +device_name: string
    +i_role: number
    +role_name: string
    +i_card: number
    +card_name: string
    +time: Date
    +access: number
    +device_ip: string
    +uuid: string
    +error: string
    +schema: ModelSchema
}
enum DoorStatus {
    Offline
    Online
}
enum LockedStatus {
    Locked
    Unlocked
    Guard
}
enum StatusIcon {
    Locked
    Unlocked
    Guard
    Opened
}
class MonitorModel extends Model {
    +mac: string
    +locked: LockedStatus
    +status: DoorStatus
    +icon: "lock" | "lock_open" | "security" | "verified_card"
    +schema: ModelSchema
}
class DeviceStore extends Store {
    +schema: StoreSchema<DeviceModel>
}
class RoleStore extends Store {
    +schema: StoreSchema<RoleModel>
}
class LogStore extends Store {
    +schema: StoreSchema<LogModel>
}
class CardStore extends Store {
    +schema: StoreSchema<CardModel>
}
class MonitorStore extends Store {
    +schema: StoreSchema<MonitorModel>
}
class DashboardComponent extends AbstractEnityManageComponent {
    +lockModes: typeof LockModes
    +lockModeIconMap: { [key: string]: LockIcons; }
    +store: DeviceStore
    +manageEntityDialogRef: TemplateRef<ElementRef<any>>
    +paginator: MatPaginator
    +sort: MatSort
    -appSrv: AppService
    #matDialog: MatDialog
    #cdRef: ChangeDetectorRef
    +ngOnInit(): void
}
class DevicesComponent extends AbstractEnityManageComponent {
    +store: DeviceStore
    +selection: SelectionModel<DeviceModel>
    +dialogEditMode: boolean
    +manageEntityDialogRef: TemplateRef<ElementRef<any>>
    +paginator: MatPaginator
    +sort: MatSort
    -appSrv: AppService
    #matDialog: MatDialog
    #cdRef: ChangeDetectorRef
}
class LoginComponent {
    +errorHint: string
    +login: string
    +password: string
    +formGroup: FormGroup
    +loginInput: ElementRef<any>
    +passInput: ElementRef<any>
    +newLoginInput: ElementRef<any>
    +newPassInput: ElementRef<any>
    +newReEnterPassInput: ElementRef<any>
    -snackBar: MatSnackBar
    -router: Router
    -appSrv: AppService
    +openSnackBar(message: string, action?: string): void
    +makeLogin(): void
}
class RolesComponent extends AbstractEnityManageComponent implements OnInit {
    +store: RoleStore
    +dialogEditMode: boolean
    +manageEntityDialogRef: TemplateRef<ElementRef<any>>
    +separatorKeysCodes: number[]
    +myControl: FormControl
    +devices: DeviceStore
    +filteredOptions: Observable<DeviceModel[]>
    +paginator: MatPaginator
    +sort: MatSort
    +notAddedDoors: DeviceModel[]
    #matDialog: MatDialog
    #cdRef: ChangeDetectorRef
    -appSrv: AppService
    -overlay: Overlay
    +ngOnInit(): void
    +displayFn(card?: CardModel): string
    +addDeviceToModel(device: DeviceModel): void
    +removeDeviceFromModel(door: DeviceModel): void
    -_filter(name: string): any[]
}
class SystemLogsComponent extends AbstractEnityManageComponent implements AfterViewInit {
    +dialog: MatDialog
    +store: LogStore
    +sort: MatSort
    -appSrv: AppService
    +compare(a: string | number, b: string | number, isAsc: boolean): number
    #initSort(): void
}
class CardsComponent extends AbstractEnityManageComponent {
    +store: CardStore
    +dialogEditMode: boolean
    +currentModel: CardModel
    +selection: SelectionModel<CardModel>
    +roles: RoleStore
    +manageEntityDialogRef: TemplateRef<ElementRef<any>>
    +paginator: MatPaginator
    +sort: MatSort
    -appSrv: AppService
    #matDialog: MatDialog
    #cdRef: ChangeDetectorRef
    +displayRoleName(iRole: number): string
}
class AppRoutingModule {
    +routes: Routes
}
ApiResponse *-- Statuses
ConfirmDialogComponent *-- DialogData
AppService *-- AppConfig
AppService *-- ApiResponse
AppService *-- RootComponentInterface
AppService *-- ConfirmDialogConfig
AppGuard *-- AppService
FieldSchemaProperty *-- Model
ModelSchema *-- FieldSchema
Model *-- ModelSchema
Model *-- DefaultActionOptions
Model *-- ApiResponse
Model *-- FieldSchemaProperty
Store *-- StoreSchema
Store *-- ApiResponse
Store *-- DefaultActionOptions
DeviceModel *-- LockModes
DeviceModel *-- ModelSchema
DeviceModel *-- LockIcons
CardModel *-- ModelSchema
RoleModel *-- DeviceModel
RoleModel *-- CardModel
RoleModel *-- ModelSchema
LogModel *-- ModelSchema
MonitorModel *-- LockedStatus
MonitorModel *-- DoorStatus
MonitorModel *-- ModelSchema
DeviceStore *-- StoreSchema
DeviceStore *-- DeviceModel
RoleStore *-- StoreSchema
RoleStore *-- RoleModel
LogStore *-- StoreSchema
LogStore *-- LogModel
CardStore *-- StoreSchema
CardStore *-- CardModel
MonitorStore *-- StoreSchema
MonitorStore *-- MonitorModel
DashboardComponent *-- LockModes
DashboardComponent *-- LockIcons
DashboardComponent *-- DeviceStore
DashboardComponent *-- AppService
DevicesComponent *-- DeviceStore
DevicesComponent *-- DeviceModel
DevicesComponent *-- AppService
LoginComponent *-- AppService
RolesComponent *-- RoleStore
RolesComponent *-- DeviceStore
RolesComponent *-- DeviceModel
RolesComponent *-- AppService
RolesComponent *-- CardModel
SystemLogsComponent *-- LogStore
SystemLogsComponent *-- AppService
CardsComponent *-- CardStore
CardsComponent *-- CardModel
CardsComponent *-- RoleStore
CardsComponent *-- AppService
@enduml